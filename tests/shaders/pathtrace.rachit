#version 460
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_ray_tracing : require                 // This is about ray tracing
#extension GL_EXT_nonuniform_qualifier : enable         // To access unsized descriptor arrays
#extension GL_EXT_scalar_block_layout : enable          // Align structure layout to scalar
#extension GL_EXT_shader_image_load_formatted : enable  // The folowing extension allow to pass images as function parameters

#extension GL_EXT_shader_explicit_arithmetic_types_int64 : require
#extension GL_EXT_buffer_reference2 : require

#define ALPHA_MASK 1

#include "Include/Globals.glsl"
#include "Include/Layouts.glsl"
#include "Include/Random.glsl"

hitAttributeEXT vec2 bary;

// Payloads
layout(location = 0) rayPayloadInEXT PtPayload prd;

vec2 Mix(vec2 a, vec2 b, vec2 c, vec3 barycentrics)
{
	return a * barycentrics.x + b * barycentrics.y + c * barycentrics.z;
}

void main()
{
    ObjBuffer objResource = objects[gl_InstanceCustomIndexEXT];
    Material material = GetMaterial(uint(objResource.materialUIID));

    float opacity = material.alpha;
    if(material.useAlbedroTex == 1 && material.forceAlpha == 0)
    {
       const vec3 barycentrics = vec3(1.0 - bary.x - bary.y, bary.x, bary.y);

        Indices  indices = Indices(objResource.indexAddress);
        Vertices vertices = Vertices(objResource.vertexAddress);
      
        // Indices of the triangle
        uvec3 ind = indices.i_[gl_PrimitiveID];  
      
        // Vertex of the triangle
        Vertex v0 = vertices.v_[ind.x];
        Vertex v1 = vertices.v_[ind.y];
        Vertex v2 = vertices.v_[ind.z];

        const vec2 uv = Mix(v0.UVs, v1.UVs, v2.UVs, barycentrics);
        opacity = texture(texturesMap[material.albedroTexIndex], uv).a;
    }

    // Do alpha blending the stochastically way
    if(rand(prd.seed) > opacity)
    {
        ignoreIntersectionEXT;
    }
}